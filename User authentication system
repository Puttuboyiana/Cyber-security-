# Import necessary libraries
import hashlib
import secrets

# User database (usually stored securely, not hardcoded)
user_database = {
    'alice': {
        'password_hash': '...',  # hashed password
        'salt': '...'            # salt used in hashing
    },
    'bob': {
        'password_hash': '...',
        'salt': '...'
    }
    # More users...
}

# Function to register a new user
def register(username, password):
    salt = secrets.token_hex(16)  # Generate a random salt
    password_hash = hashlib.sha256((password + salt).encode()).hexdigest()
    user_database[username] = {
        'password_hash': password_hash,
        'salt': salt
    }
    print(f"User {username} successfully registered.")

# Function to authenticate a user
def authenticate(username, password):
    if username in user_database:
        stored_password_hash = user_database[username]['password_hash']
        stored_salt = user_database[username]['salt']
        input_password_hash = hashlib.sha256((password + stored_salt).encode()).hexdigest()
        if input_password_hash == stored_password_hash:
            print(f"Authentication successful. Welcome, {username}!")
        else:
            print("Authentication failed. Invalid username or password.")
    else:
        print("Authentication failed. Invalid username or password.")

# Example usage
register('alice', 'password123')
authenticate('alice', 'password123')
authenticate('alice', 'wrongpassword')
    
### Explanation:

1. **Hashing and Salting**: 
   - Passwords are hashed using a cryptographic hash function (SHA-256 in this example) combined with a unique salt for each user.
   - Salting prevents attackers from using precomputed hash attacks (rainbow table attacks).

2. **User Database**: 
   - Users and their hashed passwords with salts are stored in a dictionary (`user_database`).

3. **Registration (`register` function)**:
   - When registering a new user, a random salt is generated.
   - The password is combined with the salt, hashed, and then stored along with the salt in the database.

4. **Authentication (`authenticate` function)**:
   - Checks if the provided username exists in the database.
   - Retrieves the stored salt and hashed password for the user.
   - Hashes the input password with the retrieved salt and compares it with the stored hashed password.

5. **Example Usage**:
   - Registers a user (`alice`) with a password.
   - Authenticates `alice` with correct and incorrect passwords.

### Considerations:

- **Security**: Ensure passwords are hashed securely (e.g., using a strong hash function like SHA-256).
- **Storage**: User data should be stored securely, possibly encrypted, and access should be restricted.
- **Password Policies**: Implement password policies (e.g., minimum length, complexity requirements) for stronger security.
- **Session Management**: Implement mechanisms to manage user sessions securely.
- **Logging and Monitoring**: Monitor authentication attempts and implement logging for security audits.

This pseudocode provides a basic framework. In a real-world application, you would need to adapt and expand upon this structure to meet specific security requirements and best practices.
